# **Draw battery icon
# **Level 4: full
# **Level 3: medium-high
# **Level 2: medium-low
# **Level 1: low
# **Level 0: Empty
'''
COMMENT CONVENTION
F: means the comment describes the functionality or intent of a method or line
L: means the comments describes the literal function of a line of code
N: making a note about the code, noting redundancys etc.
**: This code was pre-provided 
    e.g. led.plot(x,y) #F: This will contribute to xyz or create a certain animation
        #L: turns on the LED in the xth row and the yth colum
        #N: This code is rendundant due to xyz

'''
def batteryIcon(level: number): #F: This method displays the battery level when called
    led.plot(2, 4) #L: Turns on the LED in the 3nd row and 5th column
    led.plot(2, 0) #L: Turns on the LED in the 3nd row and 1st column
    for index in range(4): # F: Creates the edges of the battery icon
        # L: repeat the contents of the loop 4 times, incrementing index by 1 each time
        led.plot(1, index + 1) 
        led.plot(3, index + 1)
    '''
        . . x . .
        . x . x .
        . x . x .
        . x . x .
        . x x x .
        '''
    #(below) F: Depending on the battery level (which is an argument of the method) the contents of the Battery icon will be a certain amount
    if level > 0: #F: Only run when the battery isn't zero
        index2 = 0  #F: This will act as a counter L: Sets a new variable to zero
        while index2 <= level: #L: Loop the contents while the counter is less than or equal to the current battery level
            led.plot(2, 5 - index2) #F: Turn on an LED based on the position in the animation 
            index2 += 1
    else:
        led.plot(0, 0)
        led.plot(2, 2)
        led.plot(4, 4)
        '''
        x . . . .
        . . . . .
        . . x . .
        . . . . .
        . . . . x
        '''
def servo1_test(): # N: this code is redundant, and is never called again
    pins.digital_write_pin(DigitalPin.P1, 1)
    control.wait_micros(1500 + roll * 10)
    pins.digital_write_pin(DigitalPin.P1, 0)
def JoystickDeadBand(): #F: This function below just checks if the roll or pitch is below a threshold, 
    '''Descrption
        F: This function below just checks if the roll or pitch is below a threshold, 
        in this case below 5, and if it is just disregard the value and set it to zero
    '''
    global roll, pitch # L: Access the global roll and pitch variables
    if abs(roll) < 5:
        roll = 0
    if abs(pitch) < 5:
        pitch = 0
def screen(): #F: Display different elements on the screen, dependent on what the mode is 
    # If charging is detected
    if pins.analog_read_pin(AnalogPin.P0) > 750:
        # **Charge mode can not happen when drone is flying
        if arm == 0: # F: Can only charge if drone is disarmed.
            charging() # F: Start Charging 
    else:
        # F: cycle through different display modes
        if mode == 0:
            # F: display information panel (check describtions for dots())
            dots()
        if mode == 1:
            # F: Display the battery level in a graph
            led.plot_bar_graph(airbit.battery_level(), 100)
        if mode == 2:
            # F: Display the throttle value
            basic.show_number(throttle)
        if mode == 3:
            # F: Test all of the motors
            motorTest()
        if mode == 4:
            # F: Display the motor LED method
            basic.clear_screen()
            motorLed()
        if mode == 5:
            # F: Display the battery value nymber
            basic.show_number(airbit.batterym_volt())
def mainLoop(): #F: Main loop that executes important logic, of flying and setting speeds of motors, as well as calculating and determining checks and values
    global stable, cpuTime, startTime
    while True:
        # F: Collect data
        # **Read raw data from gyro and accelerometer
        airbit.IMU_sensorRead() 
        # **Find drone's absolute Roll, Pitch and Yaw angles with sensor fusion, gyro and accelerometer together.
        airbit.calculate_angles()
        basic.pause(1) # L: Pause for a millesecond
        lostSignalCheck() # F: Make sure the drone is still recieving signal 
        if motorTesting == False:
            # **The "magic" algorithm that stabilises the drone based on setpoint angle and actual angle, finding the difference and chanring motor speed to compensate.
            airbit.stabilise_pid()
        # **If upside down while armed, disable flying
        if abs(imuRoll) > 90:
            stable = False # F: If the drone is flipping over 90 on the x axis, then there is unstabilty in the drone
        else:
            stable = True # F: otherwise, the drone is stable
        # **Only start motors if armed, stable, motor controller and gyro is operating
        if arm and stable and (mcExists and (gyroExists and notCharging)): # L: If the drone is stable, armed, connected to a battery, and not charging, then
            if throttle == 0: 
                # **Idle speed of motors
                airbit.motor_speed(5, 5, 5, 5) 
            else:
                airbit.motor_speed(motorA, motorB, motorC, motorD) # F: Set the motor speed based on the input values for each motor
        else:
            # **Clear registers for error compensation algorithms, do not keep errors from past flight.
            airbit.clean_reg()
            if motorTesting:
                airbit.motor_speed(motorA, motorB, motorC, motorD) # F: Set the motor speed based on the input values for each motor, while the motorTest() function is runnign
            else:
                airbit.motor_speed(0, 0, 0, 0) # L: otherwise, turn off the motors
        cpuTime = input.running_time() - startTime # F: Keep track of the time delay between every iteration
        startTime = input.running_time() # L: Keep track of the time on every iteration
def on_button_pressed_a():# F: Change the mode teh drone is in on button a press
    global mode
    
    # L: Cycle mode from values 5-0, reducing every time
    mode += -1
    if mode < 0:
        mode = 5
input.on_button_pressed(Button.A, on_button_pressed_a) # F: Creating an input system, when button is is pressed, the function above is called
def radioSendData():
    '''
    F:
        Pd: Pitch
        Rd: Roll
        Td: Temperature (why??)
        B: Battery level
        G: upward acceleration
    '''
    radio.send_value("Pd", Math.round(imuPitch)) 
    radio.send_value("Rd", Math.round(imuRoll))
    radio.send_value("Td", input.temperature())
    radio.send_value("B", batterymVoltSmooth)
    radio.send_value("G", input.acceleration(Dimension.Z))
    radio.send_value("S", input.sound_level())
def gyroAccBubble(): #N: redundant code
    pass #F: This method does nothing. It starts the method and then breaks out of method after doing nothing
        # It is also never called again
def on_button_pressed_ab(): #F: Set mode to zero if both button a and b are pressed
    global mode
    mode = 0 #L: if both button a and b are pressed set the mode to 0
input.on_button_pressed(Button.AB, on_button_pressed_ab) # F: Creating an input system, when button is is pressed, the function above is called
def on_button_pressed_b():
    # F: Change the mode the drone is in on button b press
    # L: Cycle mode from values 0-5, increasing every time
    global mode
    mode += 1
    if mode > 5:
        mode = 0
input.on_button_pressed(Button.B, on_button_pressed_b) # F: Creating an input system, when button is is pressed, the function above is called
def motorLed(): #F: Display the power of each motor and the direction of movement on screen
    basic.clear_screen() # L: Clear the screen to prevent any overlay
    # F: Set each corner to be respective of a motor, and set the brightness of each coner to be respective of the voltage at each motor.
    led.plot_brightness(0, 4, motorA) 
    led.plot_brightness(0, 0, motorB)
    led.plot_brightness(4, 4, motorC)
    led.plot_brightness(4, 0, motorD)
    #F: Display the direction the drone is being directed to move as a dot on the screen
    led.plot(Math.map(imuRoll, -15, 15, 0, 4),
        Math.map(imuPitch, -15, 15, 4, 0))
def on_received_value(name, value): # F: Recieving, logging and processing incoming data from the remote
    global radioReceivedTime, pitch, arm, roll, throttle, yaw # F: Setting recepients from controlelr as global variables, that can be accessed from any method 
    radioReceivedTime = input.running_time() #L: Checking what time the radio message was recieved, and setting this as a variable
    if name == "P": # L: If true, the value must be pitch
        pitch = expo(value) / -3  
        pitch = Math.constrain(pitch, -15, 15) # L: Constrains the pitch to have a range of 30 (centered at 0)
    if name == "A": # L: If true, the value must be arm
        arm = value # F: Takes the  
    if name == "R": # L: If true, the value must be roll
        roll = expo(value) / 3
        roll = Math.constrain(roll, -15, 15)
    if name == "T": # L: If true, the value must be throttle
        throttle = value
        throttle = Math.constrain(throttle, 0, 100)
        if batterymVoltSmooth < 3400:
            throttle = Math.constrain(throttle, 0, 75)
    if name == "Y": # L: If true, the value must be yaw
        yaw += value * 0.1 # L: Increment the local yaw value by a recieved (downscaled) value 
radio.on_received_value(on_received_value)
# ** smartBar(0, throttle)
# ** smartBar(4, airbit.batteryLevel())
def dots(): #F: This function is just an information panel. It shows the battery level on the right, the throttle on the left, the arm on the top left, and the direction in the ceter
    basic.clear_screen() # F: Clear the screen to prevent the display from displaying over an existing display.
    led.plot(map(roll, -15, 15, 0, 4), map(pitch, -15, 15, 4, 0)) #F: Display the pitch and roll, and map the values of each from a range of 30 to a range of 4
    led.plot(map(yaw, -30, 30, 0, 4), 4) # F: Display the yaw on the last column, and map the yaw value from a range of 60 to a range of 4
    if arm:
        led.plot(0, 0) # L: Turn on top left if drone is armed
    if stable and (mcExists and (gyroExists and notCharging)):
        led.plot(2, 0) # F: If the drone is stable, plugged into a bettery and not charging, plot the 3rd LED from the left on the first row
    airbit.smart_bar(0, throttle) # F: Set the far left column to be equvialent of the throttle
    airbit.smart_bar(4, airbit.battery_level()) # F: Set the far right column to be equivalent of the battery level.


def charging(): # F: Disables and enables charging
    global AnalogP0Switch, notCharging # L: Access variables in the main script 
    if AnalogP0Switch - pins.analog_read_pin(AnalogPin.P0) > 20: # F: If the battery is not connected 
        basic.show_string("Connect battery", 100) # F: Notify user to connect the battery
    else:
        basic.pause(200) # F: Otherwise, delay for a short period of time (1/5th of a second)
    AnalogP0Switch = pins.analog_read_pin(AnalogPin.P0) 
    if pins.analog_read_pin(AnalogPin.P0) < 900: # F: If the battery's value is under 900, start the charging sequence
        basic.clear_screen() # F: clear the screen to prevent overlap, and also resets the animation
        for index3 in range(4): # F: Loop through the battery icons, to display an animation of a battery slowly filling up. When the loop starts, it will always start with the first icon
            batteryIcon(index3 + 1)
            basic.pause(500)
        notCharging = False # F: As we are currently charging, make sure the rest of the script knows we are charging
    else: # F: If the charging is complete, display a tick on the screen, notify the user that the battery has finished charging, and stop charging the battery.
        basic.show_icon(IconNames.YES) 
        basic.show_string("Charge finished!")
        notCharging = True
        AnalogP0Switch += 1


def motorTest(): # F: Test all of the motors
    global motorA, motorB, motorC, motorD, motorTesting  # L: Access global variables
    motorA = 0 # F: Set all initial variables to default values
    motorB = 0
    motorC = 0
    motorD = 0
    motorTesting = True
    # F: Test Motor B, set the value to 5 (a low value)
    motorB = 5
    # F: Test motor B for 1 second
    for index4 in range(50): #L: Loop through contents 50 times (duration: 50*20= 1000ms --> 1 second)
        basic.clear_screen() # L: Clear screen to prevent overlay
        airbit.rotate_dot(1, 1, 1, 10)
        basic.pause(20) #L: Delay 20 ms every iteration
    motorB = 0 # F: Disable Motor B
    motorD = 5 # F: Test Motor D, set the value to 5 (a low value)
    for index5 in range(50): #L: Loop through contents 50 times (duration: 50*20= 1000ms --> 1 second)
        basic.clear_screen() # L: Clear screen to prevent overlay
        airbit.rotate_dot(3, 1, 1, -10)
        basic.pause(20) #L: Delay 20 ms every iteration
    motorD = 0 # F: Disable Motor D
    motorC = 5 # F: Test Motor C, set the value to 5 (a low value)
    for index6 in range(50):
        basic.clear_screen()# L: Clear screen to prevent overlay
        airbit.rotate_dot(3, 3, 1, 10)
        basic.pause(20) #L: Delay 20 ms every iteration
    motorC = 0 # F: Disable Motor C
    motorA = 5 # F: Test Motor A, set the value to 5 (a low value)
    for index7 in range(50):
        basic.clear_screen()# L: Clear screen to prevent overlay
        airbit.rotate_dot(1, 3, 1, -10)
        basic.pause(20) #L: Delay 20 ms every iteration
    motorA = 0 # F: Disable Motor A
    motorTesting = False # F: Stop testing the motors.


def lostSignalCheck(): #F: Checks if the drone is still recieving input from the remote
    global roll, pitch, yaw, throttle, arm
    # ** Failsafe makes only sense if already flying
    if throttle > 65 and arm: # L: If the throtle is above 65 and the signal disconnects while flying
        if input.running_time() > radioReceivedTime + 3000: # L: If the time since last reception has exceeded 3000ms then
            roll = 0 #Set all of the steering to zero
            pitch = 0
            yaw = 0
            throttle = 65 #L: set the throttle to a steady 65
        if input.running_time() > radioReceivedTime + 8000: #L: If the time since last reception has exceded 8000ms then
            '''L: set all control variables to zero
               F: causes the drone to effectively turn off all flying capacity'''
            roll = 0 
            pitch = 0
            yaw = 0
            throttle = 0
            arm = 0
def simpleBatteryCheck(): #F: This method, depending on the voltage level of the battery, will display different levels of battery
    basic.clear_screen() # L: Clear the screen to make sure the battery icon is not displayed on top of a prexisting image
    if airbit.batterym_volt() > 4050: # L: If battery voltage is above 4050 display full battery symbol
        batteryIcon(4)
    elif airbit.batterym_volt() > 3900: # L: If battery voltage is above 3900 display high battery symbol
        batteryIcon(3)
    elif airbit.batterym_volt() > 3750: # L: If battery voltage is above 3750 display medium battery symbol
        batteryIcon(2)
    elif airbit.batterym_volt() > 3600: # L: If battery voltage is above 3600 display low battery symbol
        batteryIcon(1)
    else:
        batteryIcon(0) # L: Otherwise, the battery is very low, so display the empty battery icon
def expo(inp: number): # L: sets a argument called inp, must be a number 
    if inp >= 0: # L: If input is positive
        return inp / expoSetting + inp * inp / expoFactor # L: this will return (x^2)/90 + 0.5x
    else:
        return inp / expoSetting - inp * inp / expoFactor # L: this will return (x^2)/90 - 0.5x
# F: Before beginning executing any functions, all variables are set to the default value
AnalogP0Switch = 0
yaw = 0
radioReceivedTime = 0
startTime = 0
cpuTime = 0
motorTesting = False
throttle = 0
mode = 0
pitch = 0
roll = 0
arm = 0
expoFactor = 0
expoSetting = 0
motorD = 0
motorB = 0
motorC = 0
motorA = 0
batterymVoltSmooth = 0
imuRoll = 0
imuPitch = 0
notCharging = False
stable = False
gyroExists = False
mcExists = False
imuYaw = 0
batteryVolt = 0
mcExists = False
gyroExists = False
stable = True
notCharging = True
radioGroup = 86 # F: Set to th
basic.show_number(radioGroup)
simpleBatteryCheck()
basic.pause(1000)
imuPitch = 0
imuRoll = 0
batterymVoltSmooth = 3700
# **Default: 0.7
rollPitchP = 0.9
rollPitchI = 0.004
# **Default: 15
rollPitchD = 15
# **Default: 4
yawP = 5
# **Default: 10
yawD = 70
motorA = 0
motorC = 0
motorB = 0
motorD = 0
expoSetting = 2 #F: This will always return 2, does not change
expoFactor = 45 * 45 / (45 - 45 / expoSetting) #F: This will always return 90, and it does not eery change
radio.set_group(radioGroup) 
i2crr.set_i2c_pins(DigitalPin.P2, DigitalPin.P1)
# **i2crr.setI2CPins(DigitalPin.P2, DigitalPin.P1)
basic.pause(100)
airbit.IMU_Start()
basic.pause(100)
airbit.PCA_Start()
while mcExists == False: # F: If the battery is not connected
    airbit.PCA_Start()
    basic.show_string("Connect battery", 100) # L: Notify user to connect battery 
basic.show_string("M") #F: M --> Battery is connected
airbit.IMU_gyro_calibrate()
while arm:
    # F: The drone is not ready to fly yet, we need to disarm to check everything
    basic.show_string("Disarm!")
def on_forever():
    mainLoop()
basic.forever(on_forever) # F: Call the function on_forever3() every 'tick'
def on_forever2():
    airbit.battery_calculation() # F: Every iteration calculate the value of the battery
basic.forever(on_forever2) # F: Call the function on_forever2() every 'tick'
def on_forever3():
    if stable == False and arm:
        basic.show_string("Tilted. Please reset.") # F: if the drone is unstable and armed, notify the user to reset the drones orientation
    elif batterymVoltSmooth > 3400: #F: If the drone is stable, and is not armed, and the battery is above 3400
        screen() # F: Return to the "home screen" which allows the user to check various different values of the drone
    elif batterymVoltSmooth > 3350: #F: If the drone is stable, disarmed and has a battery voltage between 3400 and 3350, show the low battery symbol
        batteryIcon(1) #L: Display low battery icon N: This code is a little residual as there is another method already made to check for battery
    else: #F: If the drone is stable, disarmed and has a battery voltage is lower than 3350, exceute following
        ''' F: This is to flash the empty battery icon when the battery is extremely low. 
               This helps to both notify the user and perhaps even conserve battery by having the screen on for half the time '''
        basic.clear_screen() # F: Clear screen to prevent overlay
        batteryIcon(0) # L: battery must be very low, so display 
        basic.pause(1000) # L: Display battery icon for a second 
        basic.clear_screen() # L: Display battery icon for a second 
        basic.pause(1000) # L: pause for another second. The loop will repeat if all of the conditions reaching the else loop is satisfied.
basic.forever(on_forever3) # F: Call the function on_forever3() every 'tick'